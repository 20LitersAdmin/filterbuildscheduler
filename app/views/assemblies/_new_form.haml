-# frozen_string_literal: true

-#  =====> Hello, Interviewers!
  When creating an Assembly record, any Component or Part record
  can be the item (one half of the join table, representing child item).
  This would be a really messy select list, so we're using a custom
  search field that is AJAXed to Combinations#item_search.
  The return values are added to the :item_id select field
  so the user can choose from a limited number of records.

.col-xs-12#new_asssembly_form{ data: { uid: @combination.uid } }
  %h3 Create a new Assembly
  %p Search for a Component or Part that is used to assemble #{@combination.name}, then select it from the drop-down list of matching items.
.col-xs-12
  = simple_form_for @assembly, as: :assembly, method: :post, url: combination_assemblies_path(@combination.uid), remote: true do |f|
    = f.error_notification
    .row
      .col-xs-10
        = f.input :item_search, as: :string, label: false, hint: 'search for items by name and UID. Matches will appear in the dropdown below'
      .col-xs-2
        = icon('fas', 'search', class: 'btn blue')
    .row
      #item_search_response.col-xs-12.center{ style: 'display: none;' }
      #spinner_div.col-xs-12.center{ style: 'display: none;' }
        = icon('fas', 'spinner fa-pulse fa-2x', id: 'ajax_spinner')
    .row
      .col-xs-12
        = f.input :combination_type, as: :hidden
        = f.input :combination_id, as: :hidden
        = f.input :item_type, as: :hidden

        = f.input :item_id, as: :select, required: true, collection: [], label: 'Select Item', label_html: { style: 'display: none;' }, input_html: { style: 'display: none;' }
        = f.input :quantity, hint: @assembly.quantity_hint, required: true
        = f.input :affects_price_only, hint: 'This item is not included in a ready-to-ship unit, but is part of a complete filter. (e.g. buckets and lids join household filters at time of shipping)'
        = f.submit class: 'btn yellow'
